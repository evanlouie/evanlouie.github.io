interface IEulerQuestion {
  question: string;
  answer: () => number;
}

const Euler1: IEulerQuestion = {
  question: `
  If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
  Find the sum of all the multiples of 3 or 5 below 1000.`,
  answer: () =>
    [...Array(1000)]
      .map((_, index) => index + 1)
      .reduce((sum, n) => (n % 3 === 0 || n % 5 === 0 ? sum + n : sum), 0)
};

const Euler2: IEulerQuestion = {
  question: `
  Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.`,
  answer: () => {
    const fibonacciGenerator = function*([a, b, c] = [1, 2, 3]) {
      while (true) {
        yield a;
        c = a + b;
        a = b;
        b = c;
      }
    };

    const answerRecursive = (
      sum: number = 0,
      sequence: IterableIterator<number> = fibonacciGenerator(),
      fibonacci: number = 0
    ): number =>
      fibonacci > 4000000
        ? sum
        : answerRecursive(sum + fibonacci, sequence, sequence.next().value);

    return ((sum: number = 0) => {
      for (const fibonacci of fibonacciGenerator()) {
        if (fibonacci > 4000000) {
          break;
        } else {
          sum = sum + fibonacci;
        }
      }
      return sum;
    })();
  }
};

const Euler3: IEulerQuestion = {
  question: `
  The prime factors of 13195 are 5, 7, 13 and 29.
  What is the largest prime factor of the number 600851475143 ?`,
  answer: () => {
    /**
     * Recursive solution. V8 doesn't support TCO. Breaks on node and most browsers
     */
    const primeFactorsRecursive = (
      n: number,
      factors: Set<number> = new Set(),
      factor = 2
    ): number[] =>
      n === 1
        ? [...factors]
        : n % factor === 0
          ? primeFactorsRecursive(n / factor, factors.add(factor), factor)
          : primeFactorsRecursive(n, factors.add(factor), factor + 1);

    const primeFactors = (
      target: number,
      factors: Set<number> = new Set(),
      factor = 2
    ): number[] => {
      while (target > 1) {
        if (target % factor === 0) {
          factors.add(factor);
          target = target / factor;
        } else {
          factor = factor + 1;
        }
      }
      return [...factors];
    };

    return Math.max(...primeFactors(600851475143));
  }
};

const Euler4: IEulerQuestion = {
  question: `A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
  Find the largest palindrome made from the product of two 3-digit numbers.`,
  answer: () => {
    const isPalidrome = (n: number | string): boolean =>
      typeof n !== "string"
        ? isPalidrome(n.toString())
        : n ===
          n
            .split("")
            .reverse()
            .join("");

    return Math.max(
      ...[...Array(1000)]
        .map((_, x) => [...Array(1000)].map((_, y) => (x + 1) * (y + 1)))
        .reduce(
          (palindromes, numbers) =>
            palindromes.concat(numbers.filter(isPalidrome)),
          []
        )
    );
  }
};

const Euler5: IEulerQuestion = {
  question: `2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
  What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?`,
  answer: () => {
    const isDivibleFrom = (
      n: number,
      from: number,
      to: number,
      current?: number
    ): boolean =>
      !current
        ? isDivibleFrom(n, from, to, from)
        : current === to
          ? n % current === 0
          : current > to
            ? n % current === 0 && isDivibleFrom(n, from, to, current - 1)
            : n % current === 0 && isDivibleFrom(n, from, to, current + 1);

    /**
     * Recursive answer
     * @param current
     */
    const answerRecursive = (current: number = 1): number =>
      isDivibleFrom(current, 20, 1) ? current : answerRecursive(current + 1);

    return (() => {
      for (let x = 1; x < Infinity; x++) {
        if (isDivibleFrom(x, 20, 1)) {
          return x;
        } else {
          continue;
        }
      }
      throw new Error("No answer found");
    })();
  }
};

const Euler6: IEulerQuestion = {
  question: `The sum of the squares of the first ten natural numbers is,
  1^2 + 2^2 + ... + 10^2 = 385
  The square of the sum of the first ten natural numbers is,
  (1 + 2 + ... + 10)^2 = 552 = 3025
  Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
  Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.`,
  answer: () => {
    const sumOfSquares = (n: number): number =>
      [...Array(n)]
        .map((_, index) => Math.pow(index + 1, 2))
        .reduce((sum, square) => sum + square, 0);

    const squareOfSum = (n: number): number =>
      Math.pow(
        [...Array(n)]
          .map((_, index) => index + 1)
          .reduce((sum, num) => sum + num, 0),
        2
      );

    return squareOfSum(100) - sumOfSquares(100);
  }
};

const Euler7: IEulerQuestion = {
  question: `
  By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
  What is the 10 001st prime number?`,
  answer: () => {
    /**
     * Primes are defined as numbers not being evenly divisible by any primes lesser than itself
     */
    const primesGenerator = function*() {
      naturals: for (let current = 2; current < Infinity; current++) {
        for (let divisor = 2; divisor <= Math.sqrt(current); divisor++) {
          if (current % divisor === 0) {
            continue naturals;
          }
        }
        yield current;
      }
    };

    return ((count: number = 1) => {
      for (const prime of primesGenerator()) {
        if (count === 10001) {
          return prime;
        } else {
          count = count + 1;
        }
      }
      throw new Error("Answer not found");
    })();
  }
};

const Euler8: IEulerQuestion = {
  question: `The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
  73167176531330624919225119674426574742355349194934
  96983520312774506326239578318016984801869478851843
  85861560789112949495459501737958331952853208805511
  12540698747158523863050715693290963295227443043557
  66896648950445244523161731856403098711121722383113
  62229893423380308135336276614282806444486645238749
  30358907296290491560440772390713810515859307960866
  70172427121883998797908792274921901699720888093776
  65727333001053367881220235421809751254540594752243
  52584907711670556013604839586446706324415722155397
  53697817977846174064955149290862569321978468622482
  83972241375657056057490261407972968652414535100474
  82166370484403199890008895243450658541227588666881
  16427171479924442928230863465674813919123162824586
  17866458359124566529476545682848912883142607690042
  24219022671055626321111109370544217506941658960408
  07198403850962455444362981230987879927244284909188
  84580156166097919133875499200524063689912560717606
  05886116467109405077541002256983155200055935729725
  71636269561882670428252483600823257530420752963450
  Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?`,
  answer: () =>
    Math.max(
      ...`73167176531330624919225119674426574742355349194934
  96983520312774506326239578318016984801869478851843
  85861560789112949495459501737958331952853208805511
  12540698747158523863050715693290963295227443043557
  66896648950445244523161731856403098711121722383113
  62229893423380308135336276614282806444486645238749
  30358907296290491560440772390713810515859307960866
  70172427121883998797908792274921901699720888093776
  65727333001053367881220235421809751254540594752243
  52584907711670556013604839586446706324415722155397
  53697817977846174064955149290862569321978468622482
  83972241375657056057490261407972968652414535100474
  82166370484403199890008895243450658541227588666881
  16427171479924442928230863465674813919123162824586
  17866458359124566529476545682848912883142607690042
  24219022671055626321111109370544217506941658960408
  07198403850962455444362981230987879927244284909188
  84580156166097919133875499200524063689912560717606
  05886116467109405077541002256983155200055935729725
  71636269561882670428252483600823257530420752963450`
        .split("\n")
        .map(str => str.trim())
        .join("")
        .split("")
        .map(n => Number.parseInt(n))
        .map((_, index, numbers) =>
          numbers
            .slice(index, index + 13)
            .reduce((product, number) => product * number, 1)
        )
    )
};

const Euler9: IEulerQuestion = {
  question: `A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
  a2 + b2 = c2
  For example, 32 + 42 = 9 + 16 = 25 = 52.
  There exists exactly one Pythagorean triplet for which a + b + c = 1000.
  Find the product abc.`,
  answer: () =>
    [...Array(1000)]
      .map((_, a) =>
        [...Array(1000)]
          .map((_, b) => [a, b, Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2))])
          .filter(
            ([a, b, c]) =>
              Number.isInteger(c) && a < b && b < c && a + b + c === 1000
          )
      )
      .reduce((tripletsList, triplets) => tripletsList.concat(triplets), [])
      .reduce((numbers, triplet) => numbers.concat(triplet), [])
      .reduce((product, number) => product * number, 1)
};

const Euler10: IEulerQuestion = {
  question: `The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
  Find the sum of all the primes below two million.`,
  answer: () => {
    const primesGenerator = function*() {
      naturals: for (let current = 2; current < Infinity; current++) {
        for (let divisor = 2; divisor <= Math.sqrt(current); divisor++) {
          if (current % divisor === 0) {
            continue naturals;
          }
        }
        yield current;
      }
    };

    return ((sum: number = 0) => {
      for (const prime of primesGenerator()) {
        if (prime >= 2000000) {
          return sum;
        }
        sum = sum + prime;
      }
      throw new Error("No answer found");
    })();
  }
};

const Euler11: IEulerQuestion = {
  question: `In the 20×20 grid below, four numbers along a diagonal line have been marked in red.

  08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
  49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
  81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
  52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
  22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
  24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
  32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
  67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
  24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
  21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
  78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
  16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
  86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
  19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
  04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
  88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
  04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
  20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
  20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
  01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48

  The product of these numbers is 26 × 63 × 78 × 14 = 1788696.

  What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?`,
  answer: () =>
    Math.max(
      ...`08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
    49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
    81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
    52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
    22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
    24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
    32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
    67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
    24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
    21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
    78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
    16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
    86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
    19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
    04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
    88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
    04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
    20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
    20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
    01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48`
        .split("\n")
        .map(line =>
          line
            .trim()
            .split(" ")
            .map(n => Number.parseInt(n))
        )
        .map((row, x, grid) =>
          row
            .map(
              (_, y) =>
                x <= row.length - 4 && y <= row.length - 4
                  ? [
                      [
                        grid[x][y],
                        grid[x + 1][y + 1],
                        grid[x + 2][y + 2],
                        grid[x + 3][y + 3]
                      ],
                      [
                        grid[x][y],
                        grid[x + 1][y],
                        grid[x + 2][y],
                        grid[x + 3][y]
                      ],
                      [
                        grid[x][y],
                        grid[x][y + 1],
                        grid[x][y + 2],
                        grid[x][y + 3]
                      ]
                    ].concat(
                      x <= row.length - 1 && y <= row.length - 4 && x >= 3
                        ? [
                            [
                              grid[x][y],
                              grid[x - 1][y + 1],
                              grid[x - 2][y + 2],
                              grid[x - 3][y + 3]
                            ]
                          ]
                        : []
                    )
                  : []
            )
            .filter(quad => quad.length !== 0)
            .reduce((flat, quad) => flat.concat(quad), [])
        )
        .reduce((flat, quads) => flat.concat(quads), [])
        .map(row => row.reduce((product, num) => product * num, 1))
    )
};

const Euler12: IEulerQuestion = {
  question: `The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

  Let us list the factors of the first seven triangle numbers:

   1: 1
   3: 1,3
   6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28
  We can see that 28 is the first triangle number to have over five divisors.

  What is the value of the first triangle number to have over five hundred divisors?`,
  answer: () => {
    const triangleGenerator = function*() {
      let sum = 0;
      for (let triangle = 1; triangle < Infinity; triangle++) {
        sum = sum + triangle;
        yield sum;
      }
    };

    const factorize = (n: number) =>
      [...Array(Math.round(Math.sqrt(n)))]
        .map((_, index) => index + 1)
        .filter(factor => n % factor === 0)
        .map(factor => [factor, n / factor])
        .reduce((flat, pair) => flat.concat(pair), []);

    return ((factorCount = 0) => {
      for (const triangle of triangleGenerator()) {
        factorCount = factorize(triangle).length;
        if (factorCount > 500) {
          return triangle;
        }
      }
      throw new Error("No answer found");
    })();
  }
};
