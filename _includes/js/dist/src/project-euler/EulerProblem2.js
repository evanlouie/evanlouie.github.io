"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AbstractEulerProblem_1 = require("./AbstractEulerProblem");
var EulerProblem2 = (function (_super) {
    __extends(EulerProblem2, _super);
    function EulerProblem2() {
        _super.apply(this, arguments);
        this.problemNumber = 2;
        this.question = "\n  Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n\n  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n\n  By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.";
        this.memory = [];
    }
    EulerProblem2.prototype.fib = function (n) {
        if (n <= 2) {
            this.memory[n] = n;
        }
        if (typeof this.memory[n] === "undefined") {
            this.memory[n] = this.fib(n - 1) + this.fib(n - 2);
        }
        return this.memory[n];
    };
    EulerProblem2.prototype.fibTest = function () {
        var _this = this;
        var matches = false;
        var fibs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function (n) { return _this.fib(n); });
        return fibs.toString() === [1, 2, 3, 5, 8, 13, 21, 34, 55, 89].toString();
    };
    EulerProblem2.prototype.answer = function () {
        var runningSum = 0;
        for (var n = 0; this.fib(n) <= 4000000; n++) {
            if (this.fib(n) % 2 === 0) {
                runningSum = runningSum + this.fib(n);
            }
        }
        return runningSum.toString();
    };
    return EulerProblem2;
}(AbstractEulerProblem_1.AbstractEulerProblem));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = EulerProblem2;
